-- Connect as SYSDBA to create test user and schema
CONNECT sys/OraclePassword123@XE AS SYSDBA;

-- Create a test user for baton
CREATE USER baton IDENTIFIED BY password 
DEFAULT TABLESPACE users 
TEMPORARY TABLESPACE temp 
ACCOUNT UNLOCK;

-- Grant necessary privileges
GRANT CREATE SESSION TO baton;
GRANT CREATE TABLE TO baton;
GRANT CREATE SEQUENCE TO baton;
GRANT CREATE VIEW TO baton;
GRANT UNLIMITED TABLESPACE TO baton;
GRANT DBA TO baton; -- For testing purposes, grant DBA access

-- Connect as the test user
CONNECT baton/password@XE;

-- Drop existing tables if they exist
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE employee_data CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE login_history CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE user_roles CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE roles CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE users CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

-- Create users table
CREATE TABLE users (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR2(100) NOT NULL,
  email VARCHAR2(255) NOT NULL,
  employee_id VARCHAR2(50),
  status VARCHAR2(20) DEFAULT 'active',
  account_type VARCHAR2(20) DEFAULT 'human',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  last_login TIMESTAMP,
  manager_id NUMBER,
  password_hash VARCHAR2(255)
);

-- Insert sample users
INSERT INTO users (username, email, employee_id, status, account_type, created_at, last_login) VALUES
('admin', 'admin@example.com', 'EMP001', 'active', 'human', TIMESTAMP '2025-01-01 12:00:00', TIMESTAMP '2025-04-15 09:30:00');

INSERT INTO users (username, email, employee_id, status, account_type, created_at, last_login) VALUES
('jane.doe', 'jane.doe@example.com', 'EMP002', 'active', 'human', TIMESTAMP '2025-01-05 14:30:00', TIMESTAMP '2025-04-17 08:45:00');

INSERT INTO users (username, email, employee_id, status, account_type, created_at, last_login) VALUES
('john.smith', 'john.smith@example.com', 'EMP003', 'active', 'human', TIMESTAMP '2025-01-10 09:45:00', TIMESTAMP '2025-04-16 16:20:00');

INSERT INTO users (username, email, employee_id, status, account_type, created_at, last_login) VALUES
('service.acct', 'service@example.com', 'SVC001', 'active', 'service', TIMESTAMP '2025-02-01 08:00:00', NULL);

INSERT INTO users (username, email, employee_id, status, account_type, created_at, last_login) VALUES
('disabled.user', 'disabled@example.com', 'EMP004', 'disabled', 'human', TIMESTAMP '2025-02-15 10:15:00', TIMESTAMP '2025-03-01 11:10:00');

-- Create roles table
CREATE TABLE roles (
  id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role_name VARCHAR2(100) NOT NULL
);

-- Insert sample roles
INSERT INTO roles (role_name) VALUES ('admin');
INSERT INTO roles (role_name) VALUES ('user');
INSERT INTO roles (role_name) VALUES ('reader');

-- Create user_roles table for many-to-many relationship
CREATE TABLE user_roles (
  user_id NUMBER,
  role_id NUMBER,
  PRIMARY KEY (user_id, role_id),
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (role_id) REFERENCES roles(id)
);

-- Assign roles to users
INSERT INTO user_roles (user_id, role_id) VALUES (1, 1); -- admin has admin role
INSERT INTO user_roles (user_id, role_id) VALUES (2, 2); -- jane.doe has user role
INSERT INTO user_roles (user_id, role_id) VALUES (3, 2); -- john.smith has user role
INSERT INTO user_roles (user_id, role_id) VALUES (3, 3); -- john.smith also has reader role
INSERT INTO user_roles (user_id, role_id) VALUES (4, 2); -- service.acct has user role

COMMIT;

-- Print success message
SELECT 'Baton SQL Oracle test database initialized successfully' as message FROM dual;